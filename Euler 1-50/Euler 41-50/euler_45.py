"""
Triangular, Pentagonal, and Hexagonal
----------------------------------------
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae: 
Tn = n(n + 1) / 2, Pn = n(3n − 1) / 2, Hn = n(2n − 1). T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
"""

""" The nth hexagonal P(6,n) is also the (2n − 1)th triangular number T2n−1. 
Take: P(s, n) = (s - 2)Tn-1 + n, where s is the number of sides. In 6 sides' 
case, this gives: P(6, n) = 4Tn-1 + n. But since: Tn-1 = n(n - 1) / 2, it 
follows that: P(6, n) = ((4n(n-1)) / 2) + n = ((2n(2n-1)) / 2) = T2n-1. """

import itertools

def _figurates(sides):
    result = 0
    for n in itertools.count():
        yield result
        """ general formula for the nth polygonal, derived from 
        Python-Recreational-Mathematics/number_series/figurates.py, 
        where the limit is known in advance. """
        result = (n * ((sides - 2) * n - (sides - 4))) // 2

def tri_pent_hex():
    pentagonal_numbers = _figurates(5)
    p = 0
    for h in _figurates(6):
        while p < h:
            """ next() returns the next item in an iterator. """
            p = next(pentagonal_numbers)
        if p == h > 40755:
            return h

if __name__ == "__main__":
    print(tri_pent_hex())
