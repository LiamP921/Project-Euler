""" calculates the 'nth' triangle number which is also pentagonal and hexagonal. """
def generatePentagon(n):
    return n * (3 * n - 1) // 2
  
def generateHexagon(n):
    return n * (2 * n - 1)

""" superfluous to search triangular numbers, as these are all also hexagonal. """
def findPentHexNum(p, h):
    pent_index = p
    hex_index = h
    while True:
        pentagon_num = generatePentagon(pent_index)
        hexagon_num = generateHexagon(hex_index)
        """ iterates over two indices until a simultaneously pentagonal and hexagonal number is found. Achieved by checking 
        whether the pentagonals/hexagonals generated by the indices are equivalent to each other, and to the corresponding triangular. """
        if pentagon_num == hexagon_num and hexagon_num == (hex_index * (2 * hex_index - 1)):
            return hexagon_num
        elif pentagon_num > hexagon_num:
            hex_index += 1
        else:
            pent_index += 1

""" arguments are ordinal values of pent/hexagonals. """
print(findPentHexNum(166, 144))
