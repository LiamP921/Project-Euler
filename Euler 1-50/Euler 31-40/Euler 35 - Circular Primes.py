""" calculates the number of circular primes (whose digit permutations are all prime) < n."""
def sieveOfEratosthenes(n):
    primes = [True] * (n + 1)
    p = 2

    while p * p <= n:
        if primes[p]:
            for i in range(p * p, n + 1, p):
                primes[i] = False
        p += 1

    return [i for i in range(2, n) if primes[i]]

def isCircularPrime(n, primes_set):
    s = str(n)
    """ all possible permutations generated by rotating 's' one position to the left, and appending the leftmost digit to the right. """
    for rotation in [int(s[i:] + s[:i]) for i in range(len(s))]:
        """ if any permutation isn't prime. """
        if rotation not in primes_set:
            return False
    return True

def countCircularPrimes(limit):
    primes = sieveOfEratosthenes(limit)
    primes_set = set(primes)
    count = 0
    for n in primes:
        """ checks all permutations of each sieved prime. """
        if isCircularPrime(n, primes_set):
            count += 1
    return count

print(countCircularPrimes(1000000))
